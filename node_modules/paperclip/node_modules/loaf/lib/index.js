// Generated by CoffeeScript 1.6.2
var Section, loaf, nofactor,
  __slice = [].slice;

nofactor = require("nofactor");

Section = (function() {
  /*
  */
  Section.prototype.__isLoafSection = true;

  /*
  */


  function Section(nodeFactory) {
    var parent;

    this.nodeFactory = nodeFactory != null ? nodeFactory : nofactor["default"];
    this.start = this.nodeFactory.createTextNode("");
    this.end = this.nodeFactory.createTextNode("");
    parent = this.nodeFactory.createElement("div");
    parent.appendChild(this.start);
    parent.appendChild(this.end);
  }

  /*
  */


  Section.prototype.replace = function(node) {
    node.parentNode.insertBefore(this.toFragment(), node);
    return node.parentNode.removeChild(node);
  };

  /*
  */


  Section.prototype.show = function() {
    if (!this._detached) {
      return this;
    }
    this.append.apply(this, this._detached.getInnerChildNodes());
    this._detached = void 0;
    return this;
  };

  /*
  */


  Section.prototype.hide = function() {
    this._detached = this.removeAll();
    return this;
  };

  /*
  */


  Section.prototype.removeAll = function() {
    return this._loaf(this._removeAll());
  };

  /*
  */


  Section.prototype._removeAll = function() {
    var children, current, start;

    start = this.start;
    current = start.nextSibling;
    children = [];
    while (current !== this.end) {
      current.parentNode.removeChild(current);
      children.push(current);
      current = this.start.nextSibling;
    }
    return children;
  };

  /*
  */


  Section.prototype.append = function() {
    var children;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this._insertAfter(children, this.end.previousSibling);
  };

  /*
  */


  Section.prototype.prepend = function() {
    var children;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this._insertAfter(children, this.start);
  };

  /*
  */


  Section.prototype.replaceChildNodes = function() {
    this.removeAll();
    return this.append.apply(this, arguments);
  };

  /*
  */


  Section.prototype.toString = function() {
    var buffer;

    buffer = this.getChildNodes().map(function(node) {
      var _ref;

      return node.innerHTML || ((_ref = node.nodeValue) != null ? _ref : String(node));
    });
    return buffer.join("");
  };

  /*
  */


  Section.prototype.toFragment = function() {
    return this.nodeFactory.createFragment(this.getChildNodes());
  };

  /*
  */


  Section.prototype.dispose = function() {
    if (this._disposed) {
      return;
    }
    this._disposed = true;
    this._removeAll();
    this.start.parentNode.removeChild(this.start);
    return this.end.parentNode.removeChild(this.end);
  };

  /*
  */


  Section.prototype.getChildNodes = function() {
    var children, cn, end;

    cn = this.start;
    end = this.end.nextSibling;
    children = [];
    while (cn !== end) {
      children.push(cn);
      cn = cn.nextSibling;
    }
    return children;
  };

  /*
  */


  Section.prototype.getInnerChildNodes = function() {
    var cn;

    cn = this.getChildNodes();
    cn.shift();
    cn.pop();
    return cn;
  };

  /*
  */


  Section.prototype._insertAfter = function(newNodes, refNode) {
    if (!newNodes.length) {
      return;
    }
    newNodes = newNodes.map(function(node) {
      if (node.__isLoafSection) {
        return node.toFragment();
      } else {
        return node;
      }
    });
    if (newNodes.length > 1) {
      newNodes = this.nodeFactory.createFragment(newNodes);
    } else {
      newNodes = newNodes[0];
    }
    return refNode.parentNode.insertBefore(newNodes, refNode.nextSibling);
  };

  /*
  */


  Section.prototype._loaf = function(children) {
    var l;

    l = new loaf();
    l.append.apply(l, children);
    return l;
  };

  return Section;

})();

module.exports = loaf = function(nodeFactory) {
  return new Section(nodeFactory);
};
