// Generated by CoffeeScript 1.6.2
var Comment, Container, Element, Fragment, Node, StringNodeFactory, Style, Text, bindable, ent, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

ent = require("./ent");

Node = (function() {
  function Node() {}

  Node.prototype.__isNode = true;

  return Node;

})();

Container = (function(_super) {
  __extends(Container, _super);

  /*
  */


  function Container() {
    this.childNodes = [];
  }

  /*
  */


  Container.prototype.appendChild = function(node) {
    var child, _i, _len, _ref;

    if (node.nodeType === 11) {
      _ref = node.childNodes.concat();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        this.appendChild(child);
      }
      return;
    }
    this._unlink(node);
    this.childNodes.push(node);
    return this._link(node);
  };

  /*
  */


  Container.prototype.prependChild = function(node) {
    if (!this.childNodes.length) {
      return this.appendChild(node);
    } else {
      return this.insertBefore(node, this.childNodes[0]);
    }
  };

  /*
  */


  Container.prototype.removeChild = function(child) {
    var i, _ref, _ref1;

    i = this.childNodes.indexOf(child);
    if (!~i) {
      return;
    }
    this.childNodes.splice(i, 1);
    if ((_ref = child.previousSibling) != null) {
      _ref.nextSibling = child.nextSibling;
    }
    if ((_ref1 = child.nextSibling) != null) {
      _ref1.previousSibling = child.previousSibling;
    }
    return child.parentNode = child.nextSibling = child.previousSibling = void 0;
  };

  /*
  */


  Container.prototype.insertBefore = function(newElement, before) {
    var node, _i, _len, _ref;

    if (newElement.nodeType === 11) {
      _ref = newElement.childNodes.concat().reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        this.insertBefore(node, before);
        before = node;
      }
      return;
    }
    return this._splice(this.childNodes.indexOf(before), 0, newElement);
  };

  /*
  */


  Container.prototype._splice = function(index, count, node) {
    var _ref;

    if (index == null) {
      index = -1;
    }
    if (!~index) {
      return;
    }
    if (node) {
      this._unlink(node);
    }
    (_ref = this.childNodes).splice.apply(_ref, arguments);
    if (node) {
      return this._link(node);
    }
  };

  /*
  */


  Container.prototype._unlink = function(node) {
    if (node.parentNode) {
      return node.parentNode.removeChild(node);
    }
  };

  /*
  */


  Container.prototype._link = function(node) {
    var i, _ref, _ref1;

    if (!node.__isNode) {
      throw new Error("cannot append non-node");
    }
    node.parentNode = this;
    i = this.childNodes.indexOf(node);
    node.previousSibling = i !== 0 ? this.childNodes[i - 1] : void 0;
    node.nextSibling = i !== this.childNodes.length - 1 ? this.childNodes[i + 1] : void 0;
    if ((_ref = node.previousSibling) != null) {
      _ref.nextSibling = node;
    }
    return (_ref1 = node.nextSibling) != null ? _ref1.previousSibling = node : void 0;
  };

  return Container;

})(Node);

Style = (function() {
  /*
  */
  Style.prototype._hasStyle = false;

  /*
  */


  function Style() {}

  /*
  */


  Style.prototype.setProperty = function(key, value) {
    if (value == null) {
      value = "";
    }
    if (value === "") {
      delete this[key];
      return;
    }
    return this[key] = value;
  };

  /*
  */


  Style.prototype.parse = function(styles) {
    var sp, style, _i, _len, _ref, _results;

    _ref = styles.split(/;\s*/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      style = _ref[_i];
      sp = style.split(/:\s*/);
      if ((sp[1] == null) || sp[1] === "") {
        continue;
      }
      _results.push(this[sp[0]] = sp[1]);
    }
    return _results;
  };

  /*
  */


  Style.prototype.toString = function() {
    var buffer, key, v;

    buffer = [];
    for (key in this) {
      if (this.constructor.prototype[key] != null) {
        continue;
      }
      v = this[key];
      if (v === "") {
        continue;
      }
      buffer.push("" + key + ": " + this[key]);
    }
    if (!buffer.length) {
      return "";
    }
    return buffer.join("; ") + ";";
  };

  /*
  */


  Style.prototype.hasStyles = function() {
    var key;

    if (this._hasStyle) {
      return true;
    }
    for (key in this) {
      if ((this[key] != null) && (this.constructor.prototype[key] == null)) {
        return (this._hasStyle = true);
      }
    }
    return false;
  };

  return Style;

})();

Element = (function(_super) {
  __extends(Element, _super);

  /*
  */


  Element.prototype.nodeType = 3;

  /*
  */


  function Element(nodeName) {
    Element.__super__.constructor.call(this);
    this.nodeName = nodeName.toUpperCase();
    this._name = nodeName.toLowerCase(0);
    this.attributes = [];
    this._attrsByKey = {};
    this.style = new Style();
  }

  /*
  */


  Element.prototype.setAttribute = function(name, value) {
    var abk;

    name = name.toLowerCase();
    if (name === "style") {
      return this.style.parse(value);
    }
    if (value === void 0) {
      return this.removeAttribute(name);
    }
    if (!(abk = this._attrsByKey[name])) {
      this.attributes.push(abk = this._attrsByKey[name] = {});
    }
    abk.name = name;
    return abk.value = value;
  };

  /*
  */


  Element.prototype.removeAttribute = function(name) {
    var attr, i, _i, _len, _ref;

    _ref = this.attributes;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      attr = _ref[i];
      if (attr.name === name) {
        this.attributes.splice(i, 1);
        break;
      }
    }
    return delete this._attrsByKey[name];
  };

  /*
  */


  Element.prototype.getAttribute = function(name) {
    var _ref;

    return (_ref = this._attrsByKey[name]) != null ? _ref.value : void 0;
  };

  /*
  */


  Element.prototype.toString = function() {
    var attrbuff, attribs, buffer, name, v;

    buffer = ["<", this._name];
    attribs = [];
    for (name in this._attrsByKey) {
      v = this._attrsByKey[name].value;
      attrbuff = name;
      if (v != null) {
        attrbuff += "=\"" + v + "\"";
      }
      attribs.push(attrbuff);
    }
    if (this.style.hasStyles()) {
      attribs.push("style=\"" + (this.style.toString()) + "\"");
    }
    if (attribs.length) {
      buffer.push(" ", attribs.join(" "));
    }
    buffer.push(">");
    buffer.push.apply(buffer, this.childNodes);
    buffer.push("</", this._name, ">");
    return buffer.join("");
  };

  return Element;

})(Container);

Text = (function(_super) {
  __extends(Text, _super);

  /*
  */


  Text.prototype.nodeType = 3;

  /*
  */


  function Text(value) {
    this.value = ent(value);
  }

  /*
  */


  Text.prototype.toString = function() {
    return this.value;
  };

  return Text;

})(Node);

Comment = (function(_super) {
  __extends(Comment, _super);

  function Comment() {
    _ref = Comment.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  Comment.prototype.nodeType = 8;

  /*
  */


  Comment.prototype.toString = function() {
    return "<!--" + (Comment.__super__.toString.call(this)) + "-->";
  };

  return Comment;

})(Text);

Fragment = (function(_super) {
  __extends(Fragment, _super);

  function Fragment() {
    _ref1 = Fragment.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  /*
  */


  Fragment.prototype.nodeType = 11;

  /*
  */


  Fragment.prototype.toString = function() {
    return this.childNodes.join("");
  };

  return Fragment;

})(Container);

StringNodeFactory = (function(_super) {
  __extends(StringNodeFactory, _super);

  /*
  */


  StringNodeFactory.prototype.name = "string";

  /*
  */


  function StringNodeFactory(context) {
    this.context = context;
    this.internal = new bindable.Object();
  }

  /*
  */


  StringNodeFactory.prototype.createElement = function(name) {
    return new Element(name);
  };

  /*
  */


  StringNodeFactory.prototype.createTextNode = function(text) {
    return new Text(text);
  };

  /*
  */


  StringNodeFactory.prototype.createComment = function(text) {
    return new Comment(text);
  };

  /*
  */


  StringNodeFactory.prototype.createFragment = function(children) {
    var child, childrenToArray, frag, _i, _len;

    if (children == null) {
      children = [];
    }
    frag = new Fragment();
    childrenToArray = Array.prototype.slice.call(children, 0);
    for (_i = 0, _len = childrenToArray.length; _i < _len; _i++) {
      child = childrenToArray[_i];
      frag.appendChild(child);
    }
    return frag;
  };

  /*
  */


  StringNodeFactory.prototype.parseHtml = function(buffer) {
    return this.createTextNode(buffer);
  };

  return StringNodeFactory;

})(require("./base"));

module.exports = new StringNodeFactory();
