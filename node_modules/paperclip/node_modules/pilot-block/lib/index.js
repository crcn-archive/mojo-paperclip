// Generated by CoffeeScript 1.6.2
var Pilot, Section, toarray, utils;

Section = require("./section");

toarray = require("toarray");

utils = require("./utils");

Pilot = (function() {
  /*
  */
  function Pilot() {
    this._controllers = {};
    this._sections = {};
    this._bid = 0;
  }

  /*
  */


  Pilot.prototype.control = function(name, controller) {
    this._controllers[name] = controller;
    return this._bindController(name);
  };

  /*
   returns an elements block
  */


  Pilot.prototype.section = function(name) {
    return this._sections[name];
  };

  /*
  */


  Pilot.prototype.createSection = function(content) {
    var elements;

    if (content == null) {
      content = "";
    }
    if (typeof content === "string") {
      elements = utils.createElements(content).childNodes;
    } else {
      elements = toarray(content);
    }
    return this._blockifyElements(elements);
  };

  /*
   returns a registered controller
  */


  Pilot.prototype.controller = function(name) {
    return this._controllers[name];
  };

  /*
  */


  Pilot.prototype._removeSection = function(section) {
    if (!this._sections[section.name]) {
      return;
    }
    delete this._sections[section.name];
    delete this._controllers[section.name];
    return this._removeChildSections(section);
  };

  /*
  */


  Pilot.prototype._removeChildSections = function(section) {
    var start, _results,
      _this = this;

    start = section.start;
    _results = [];
    while (start) {
      this._traverse(start, function(child) {
        var sectionName;

        if ((sectionName = _this._controllerNameFromBlock(child))) {
          delete _this._sections[sectionName];
          return delete _this._controllers[sectionName];
        }
      });
      _results.push(start = start.nextSibling);
    }
    return _results;
  };

  /*
  */


  Pilot.prototype._traverse = function(element, callback) {
    var child, _i, _len, _ref, _results;

    callback(element);
    _ref = element.childNodes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(this._traverse(child, callback));
    }
    return _results;
  };

  /*
  */


  Pilot.prototype._blockifyElements = function(elements) {
    var bid, end, first, last, parent, start;

    start = document.createComment("spc:" + (bid = this._generateRandomBlockId()));
    end = document.createComment("epc:" + bid);
    first = elements[0];
    if (first) {
      last = elements[elements.length - 1];
      parent = first.parentNode;
      parent.insertBefore(start, first);
      if (parent.lastChild === last) {
        parent.appendChild(end);
      } else {
        parent.insertBefore(end, last.nextSibling);
      }
    } else {
      parent = document.createElement("div");
      parent.appendChild(start);
      parent.appendChild(end);
    }
    return this._sections[bid] = new Section(bid, start, this);
  };

  /*
  */


  Pilot.prototype._register = function(bid, block) {
    this._sections[bid] = block;
    this.update();
    return block;
  };

  /*
   scans element for comments
  */


  Pilot.prototype.update = function(element) {
    var child, controllerName, _i, _len, _ref, _results;

    if (element == null) {
      element = document.body;
    }
    if ((controllerName = this._controllerNameFromBlock(element))) {
      if (this._sections[controllerName]) {
        this._sections[controllerName].reset(element);
      } else {
        this._sections[controllerName] = new Section(controllerName, element, this);
      }
      this._bindController(controllerName);
      return;
    }
    if (element.childNodes) {
      _ref = element.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(this.update(child));
      }
      return _results;
    }
  };

  /*
  */


  Pilot.prototype._isStartBlock = function(element) {
    return element && element.nodeName === "#comment" && String(element.nodeValue).substr(0, 4) === "spc:";
  };

  /*
  */


  Pilot.prototype._controllerNameFromBlock = function(element) {
    if (this._isStartBlock(element)) {
      return element.nodeValue.substr(4);
    } else {
      return null;
    }
  };

  /*
  */


  Pilot.prototype._bindController = function(name) {
    var block, controller;

    if (!(block = this._sections[name]) || !(controller = this._controllers[name]) || block.controller() === controller) {
      return;
    }
    block.controller(controller);
    return controller.elementBlock(block);
  };

  /*
  */


  Pilot.prototype._generateRandomBlockId = function() {
    var bid;

    while (1) {
      bid = "block-" + (++this._bid);
      if (!this._sections[bid]) {
        break;
      }
    }
    return bid;
  };

  return Pilot;

})();

module.exports = new Pilot();

module.exports.create = function() {
  return new Pilot();
};

module.exports.utils = require("./utils");
