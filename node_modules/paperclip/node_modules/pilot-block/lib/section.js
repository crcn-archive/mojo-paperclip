// Generated by CoffeeScript 1.6.2
var Section, utils;

utils = require("./utils");

Section = (function() {
  Section.prototype.__isSection = true;

  /*
  */


  function Section(name, start, pilot) {
    this.name = name;
    this.start = start;
    this.pilot = pilot;
    if (!start.parentNode || (start != null ? start.parentNode.nodeType : void 0) === 11) {
      utils.copySiblings(this.start, document.createElement("div"));
    }
    this.update();
  }

  /*
  */


  Section.prototype.removeElements = function() {
    this.detach();
    this.elements = [];
    return this.allElements = [];
  };

  /*
  */


  Section.prototype.reset = function(start) {
    if (this.start === start) {
      return;
    }
    this.start = start;
    return this.update();
  };

  /*
  */


  Section.prototype.removeAll = function() {
    var _ref, _ref1;

    this.pilot._removeSection(this);
    this.removeElements();
    if (!this.start) {
      return;
    }
    if ((_ref = this.start.parentNode) != null) {
      _ref.removeChild(this.start);
    }
    if (!this.end) {
      return;
    }
    return (_ref1 = this.end.parentNode) != null ? _ref1.removeChild(this.end) : void 0;
  };

  /*
  */


  Section.prototype.appendTo = function(element) {
    return utils.moveChildren(utils.arrayToFragment(this.allElements), element);
  };

  /*
  */


  Section.prototype.append = function() {
    var e, frag;

    frag = this._parseElements(arguments);
    if (!this.start.parentNode && !this.detachedElements) {
      return;
    }
    if (!this.start.parentNode) {
      this.detachedElements.push(frag);
    } else {
      try {
        this.start.parentNode.insertBefore(frag, this.end);
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
    this.unguard();
    return this.update();
  };

  /*
  */


  Section.prototype.prepend = function() {
    var e, frag;

    frag = this._parseElements(arguments);
    if (!this.start.parentNode && !this.detachedElements) {
      return;
    }
    if (!this.start.parentNode) {
      this.detachedElements.unshift(frag);
    } else {
      try {
        this.start.parentNode.insertBefore(frag, this.start.nextSibling);
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
    this.unguard();
    return this.update();
  };

  /*
  */


  Section.prototype.unguard = function() {
    if (!this.start.parentNode) {
      return;
    }
    return utils.unguardComments(this.start.parentNode);
  };

  /*
  */


  Section.prototype.replaceChildren = function(element) {
    utils.removeAllChildren(element);
    return this.appendTo(element);
  };

  /*
   Sets the HTML content before each comment blocks
  */


  Section.prototype.html = function(content) {
    if (!arguments.length) {
      return this.toString();
    }
    this.update();
    this.removeElements();
    return this.prepend(utils.createElements(content));
  };

  /*
  */


  Section.prototype.toString = function() {
    return utils.guardComments($(this.start.parentNode).html());
  };

  /*
  */


  Section.prototype.updateChildren = function() {
    return this.pilot.update(this.start.parentNode);
  };

  /*
  */


  Section.prototype.controller = function(value) {
    if (!arguments.length) {
      return this._controller;
    }
    return this._controller = value;
  };

  /*
  */


  Section.prototype.dispose = function() {
    return this.removeAll();
  };

  /*
  */


  Section.prototype.update = function() {
    var celement, elements, endElement, nid;

    celement = this.start.nextSibling;
    nid = "epc:" + this.name;
    elements = [];
    while (celement) {
      if (celement.nodeName === "#comment" && String(celement.nodeValue) === nid) {
        endElement = celement;
        break;
      }
      elements.push(celement);
      celement = celement.nextSibling;
    }
    this.elements = elements;
    this.end = endElement;
    return this.allElements = [this.start].concat(elements).concat([this.end]);
  };

  /*
   TRUE if attached to the dom
  */


  Section.prototype.attachedToDOM = function() {
    var p;

    p = this.start;
    while (p && (p !== document.body)) {
      p = p.parentNode;
    }
    return p === document.body;
  };

  /*
   detaches the elements within the comment blocks
  */


  Section.prototype.detach = function() {
    var celement, celements, parent;

    this._detached = true;
    celements = this.detachedElements = [];
    celement = this.start.nextSibling;
    parent = this.start.parentNode;
    if (!parent) {
      return;
    }
    while (celement && celement !== this.end) {
      celements.push(celement);
      parent.removeChild(celement);
      celement = this.start.nextSibling;
    }
    return this.update();
  };

  /*
  */


  Section.prototype.dispose = function() {
    return this.removeAll();
  };

  /*
   re-adds the elements within the comment blocks
  */


  Section.prototype.attach = function() {
    var element, frag, _i, _len, _ref;

    if (!this._detached) {
      return;
    }
    this._detached = false;
    frag = document.createDocumentFragment();
    _ref = this.detachedElements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      frag.appendChild(element);
      this.start.parentNode.insertBefore(frag, this.end);
    }
    return this.update();
  };

  /*
  */


  Section.prototype._parseElement = function(element) {
    if (typeof element === "string") {
      return utils.createElements(element).childNodes;
    } else if (element.__isSection) {
      return utils.arrayToFragment(element.allElements);
    } else {
      return element;
    }
  };

  /*
  */


  Section.prototype._parseElements = function(elements) {
    var el, frag, _i, _len;

    frag = document.createDocumentFragment();
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      el = elements[_i];
      frag.appendChild(this._parseElement(el));
    }
    return frag;
  };

  return Section;

})();

module.exports = Section;
