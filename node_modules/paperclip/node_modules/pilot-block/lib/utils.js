// Generated by CoffeeScript 1.6.2
/*
*/
exports.moveChildren = function(from, after) {
  if (!after.appendChild) {
    return;
  }
  return after.appendChild(exports.fragment(from));
};

/*
*/


exports.copySiblings = function(child, to) {
  var sibling, siblings, _i, _len;

  siblings = [];
  while (child) {
    siblings.push(child);
    child = child.nextSibling;
  }
  for (_i = 0, _len = siblings.length; _i < _len; _i++) {
    sibling = siblings[_i];
    to.appendChild(sibling);
  }
  return to;
};

/*
*/


exports.fragment = function(from) {
  var frag;

  frag = document.createDocumentFragment();
  while (from.childNodes.length) {
    frag.appendChild(from.childNodes[0]);
  }
  return frag;
};

/*
*/


exports.copyElements = function(elements) {
  var child, frag, _i, _len;

  frag = document.createDocumentFragment();
  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    child = elements[_i];
    if (!child) {
      continue;
    }
    frag.appendChild(child.cloneNode(true));
  }
  return frag;
};

/*
*/


exports.insertAfter = function(element, after) {
  var parent;

  parent = after.parentNode;
  if (after === parent.lastChild) {
    return parent.appendChild(element);
  } else {
    return parent.insertBefore(element, after.nextSibling);
  }
};

/*
*/


exports.createElements = function(content) {
  var doc, frag;

  frag = document.createDocumentFragment();
  doc = document.createElement("div");
  $(doc).html(exports.guardComments(content));
  while (doc.childNodes.length) {
    frag.appendChild(doc.childNodes[0]);
  }
  return frag;
};

/*
*/


exports.arrayToFragment = function(children) {
  var child, frag, _i, _len;

  frag = document.createDocumentFragment();
  for (_i = 0, _len = children.length; _i < _len; _i++) {
    child = children[_i];
    frag.appendChild(child);
  }
  return frag;
};

/*
 guard the comments from IE
*/


exports.guardComments = function(content) {
  return String(content || "").replace(/(\{g\})*<!--/g, "\{g\}<!--");
};

/*
*/


exports.unguardComments = function(element) {
  var child, _i, _len, _ref;

  _ref = element.childNodes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    child = _ref[_i];
    exports.unguardComments(child);
  }
  if (element.nodeName === "#text") {
    if (~element.nodeValue.indexOf("{g}")) {
      return element.nodeValue = element.nodeValue.replace(/\{g\}/g, "");
    }
  }
};

/*
*/


exports.removeAllChildren = function(element) {
  var _results;

  if (!element.childNodes) {
    return;
  }
  _results = [];
  while (element.childNodes.length) {
    _results.push(element.removeChild(element.childNodes[0]));
  }
  return _results;
};
