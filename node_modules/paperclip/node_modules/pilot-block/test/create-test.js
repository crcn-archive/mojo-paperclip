var pilot = require(".."),
helpers = require("./helpers/controllers"),
expect = require("expect.js"),
utils = require("./helpers/utils");


describe("create", function() {  

  var binder, b = document.body, block1;

  it("can create a pilot", function() {
    binder = pilot;
    document.body.innerHTML = ""
  });

  it("can scan for comment blocks", function() {
    b.innerHTML = require("./helpers/html/noComments");
    binder.update(b);
  });

  it("has no blocks", function() {
    var n = 0;

    //ie support
    for(var key in binder._sections) {
      n++;
    }
    expect(n).to.be(0);
  });

  it("has 1 child in the document body", function(next) {
    expect(document.body.childNodes.length).to.be(1);
    setTimeout(next, 0);
  })


  it("can create a block out of the first div", function(next) {
    block1 = binder.createSection(document.body.childNodes[0]);
    setTimeout(next, 0);
  });

  it("can detach the block1 element", function(next) {
    block1.detach();
    setTimeout(next, 0);
  });

  it("has no children in the document body", function(next) {
    expect(utils.isBlockStart(document.body.childNodes[0])).to.be(true);
    expect(utils.isBlockEnd(document.body.childNodes[1])).to.be(true);
    expect(document.body.childNodes.length).to.be(2);
    setTimeout(next, 0);
  });

  it("can re-attach the children", function(next) {
    block1.attach();
    setTimeout(next, 0);
  });

  it("cannot re-attach children", function() {
    block1.attach(); // does nothing
  })

  it("has 3 children in the document body", function() {
    expect(document.body.childNodes.length).to.be(3);
  });
});