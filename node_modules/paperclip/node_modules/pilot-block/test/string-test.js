var pilot = require(".."),
helpers = require("./helpers/controllers"),
expect = require("expect.js"),
utils = require("./helpers/utils");


describe("string", function() {  

  var binder, b = document.body, block1, blocke;

  it("can create a pilot", function() {
    binder = pilot;
    document.body.innerHTML = ""
  });


  it("can wrap a string around a block", function(next) {
    block1 = binder.createSection("<div></div>");
    var div = document.createElement("div");
    div.innerHTML = "<!--hello-->";
    expect(block1.html().toLowerCase().replace(/[\r\n\t\s]+/g,"")).to.be("{g}<!--spc:block-1--><div></div>{g}<!--epc:block-1-->");
    setTimeout(next, 0);
  });


  it("can add a controller to the block1 string", function() {
    binder.control(block1.name, {
      elementBlock: function(block) {
        block.html("<strong>hello world!</strong>, how are you today?");
      }
    });
  });

  it("can add the block string to the dom", function(next) {
    block1.appendTo(document.body);
    setTimeout(next, 0);
  });


  it("block1 has 2 elements", function(next) {
    var sblock = binder.section(block1.name);
    expect(sblock.elements.length).to.be(2);
    setTimeout(next, 0);
  });


  it("block1 has a strong element", function(next) {
    var sblock = binder.section(block1.name);
    expect(sblock.elements[0].nodeName).to.be("STRONG");
    setTimeout(next, 0);
  });

  it("block1 can be stringified", function(next) {
    var sblock = binder.section(block1.name);
    expect(sblock.toString().toLowerCase()).to.be("{g}<!--spc:block-1--><strong>hello world!</strong>, how are you today?{g}<!--epc:block-1-->")
    setTimeout(next, 0);
  })


  it("block1 has a #text element", function() {
    var sblock = binder.section(block1.name);
    expect(sblock.elements[1].nodeName).to.be("#text");
  });


  it("an emptry block can be created", function() {
    blocke = binder.createSection();
  });

  it("empty block can append a child", function() {
    blocke.append(binder.createSection("hello"));
  })


});