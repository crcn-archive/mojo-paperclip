var pilot = require(".."),
helpers = require("./helpers/controllers"),
expect = require("expect.js"),
utils = require("./helpers/utils");


describe("block", function() {  

  var binder, b = document.body, $b = $(document.body), block5, block2, block3;

  it("can create a pilot", function() {
    binder = pilot;
  });

  it("can scan for comment blocks", function() {
    $b.html(require("./helpers/html/manyComments"));
    binder.update(b);
  });


  it("has a 5divs comment block", function(next) {
    block5 = binder.section("5divs");
    expect(block5).not.to.be(undefined);
    expect(block5.elements.length).to.be(5);
    setTimeout(next, 0);
  });



  it("has a 2ps comment block", function(next) {
    block2 = binder.section("2ps");
    expect(block2).not.to.be(undefined);
    expect(block2.elements.length).to.be(2);
    setTimeout(next, 0);
  });


  it("has a 3spans comment block", function(next) {
    block3 = binder.section("3spans");
    expect(block3).not.to.be(undefined);
    expect(block3.elements.length).to.be(3);
    setTimeout(next, 0)
  });


  it("can detach the 3span comment block", function(next) {
    block3.detach();
    setTimeout(next, 0);
  });


  it("doesn't have any elements in the 3span block", function() {
    utils.traverse(document.body, function(element) {
      if(utils.isStartBlock(element, "3spans")) {
        expect(utils.isEndBlock(element.nextSibling, "3spans")).to.be(true);
      }
    });
  });

  it("can re-attach the 3span children", function(next) {
    block3.attach();
    setTimeout(next, 0);
  });


  it("has 3span children", function(done) {
    utils.traverse(document.body, function(element) {
      if(utils.isStartBlock(element, "3spans")) {
        for(var i = 3; i--;) {
          expect((element = element.nextSibling).nodeName == "SPAN").to.be(true);
        }
        expect(utils.isEndBlock(element.nextSibling, "3spans")).to.be(true);
      }
    });
    setTimeout(done, 0);
  });


});