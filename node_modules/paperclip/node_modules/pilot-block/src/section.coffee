utils = require "./utils"

class Section

  __isSection: true

  ###
  ###

  constructor: (@name, @start, @pilot) -> 
    if not start.parentNode or start?.parentNode.nodeType is 11
      utils.copySiblings @start, document.createElement("div")


    @update()

  ###
  ###

  removeElements: () ->
    @detach()
    @elements    = []
    @allElements = []

  ###
  ###

  reset: (start) ->
    return if @start is start
    @start = start
    @update()

  ###
  ###

  removeAll: () ->
    @pilot._removeSection @
    @removeElements()
    return unless @start
    @start.parentNode?.removeChild @start
    return unless @end
    @end.parentNode?.removeChild @end

  ###
  ###

  appendTo: (element) ->
    utils.moveChildren utils.arrayToFragment(@allElements), element

  ###
  ###

  append: () ->

    frag = @_parseElements arguments

    return if not @start.parentNode and not @detachedElements
    
    unless @start.parentNode
      @detachedElements.push frag
    else
      try 
        @start.parentNode.insertBefore frag, @end
      catch e
        console.error e

    @unguard()
    @update()

  ###
  ###

  prepend: () ->

    frag = @_parseElements arguments
    
    return if not @start.parentNode and not @detachedElements

    unless @start.parentNode
      @detachedElements.unshift frag
    else
      try
        @start.parentNode.insertBefore frag, @start.nextSibling
      # IE 8
      catch e
        console.error e

    @unguard()
    @update()


  ###
  ###

  unguard: () ->  
    return unless @start.parentNode
    utils.unguardComments @start.parentNode

  ###
  ###

  replaceChildren: (element) ->
    utils.removeAllChildren element
    @appendTo element

  ###
   Sets the HTML content before each comment blocks
  ###

  html: (content) ->
    return @toString() if not arguments.length
    @update()

    @removeElements()
    @prepend utils.createElements content


  ###
  ###

  toString: () -> utils.guardComments($(@start.parentNode).html())

  ###
  ###

  updateChildren: () ->
    # need to fix the section references if raw HTML is provided
    @pilot.update @start.parentNode

  ###
  ###

  controller: (value) ->
    return @_controller if not arguments.length
    @_controller = value

  ###
  ###

  dispose: () ->
    @removeAll()

  ###
  ###

  update: () ->

    celement = @start.nextSibling
    nid      = "epc:#{@name}"
    elements = []

    while celement

      if celement.nodeName is "#comment" and String(celement.nodeValue) is nid
        endElement = celement
        break
      elements.push celement
      celement = celement.nextSibling

    @elements = elements
    @end      = endElement


    @allElements = [@start].concat(elements).concat [@end]

  ###
   TRUE if attached to the dom
  ###

  attachedToDOM: () -> 
    p = @start
    while p and (p isnt document.body)
      p = p.parentNode

    p is document.body


  ###
   detaches the elements within the comment blocks
  ###

  detach: () ->
    @_detached = true
    celements  = @detachedElements = []
    celement   = @start.nextSibling
    parent     = @start.parentNode

    return if not parent

    while celement and celement isnt @end
      celements.push celement
      parent.removeChild celement
      celement = @start.nextSibling

    @update() 

  ###
  ###

  dispose: () -> @removeAll()

  ###
   re-adds the elements within the comment blocks
  ###

  attach: () ->

    return unless @_detached
    @_detached = false
    frag = document.createDocumentFragment()

    for element in @detachedElements
      frag.appendChild element
      @start.parentNode.insertBefore frag, @end

    @update()

  ###
  ###

  _parseElement: (element) -> 
    if typeof element is "string" 
      return utils.createElements(element).childNodes
    else if element.__isSection
      return utils.arrayToFragment(element.allElements)
    else
      return element


  ###
  ###

  _parseElements: (elements) -> 
    frag = document.createDocumentFragment()
    for el in elements
      frag.appendChild @_parseElement el

    frag






module.exports = Section