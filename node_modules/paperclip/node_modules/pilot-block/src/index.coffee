Section      = require "./section"
toarray      = require "toarray"
utils = require "./utils"

class Pilot 

  ###
  ###

  constructor: () ->
    @_controllers = {}
    @_sections    = {}
    @_bid         = 0

  ###
  ###

  control: (name, controller) ->
    @_controllers[name] = controller
    @_bindController name


  ###
   returns an elements block
  ###

  section: (name) -> @_sections[name]

  ###
  ###

  createSection: (content = "") -> 

    if typeof content is "string"
      elements = utils.createElements(content).childNodes
    else 
      elements = toarray content

    @_blockifyElements elements


  ###
   returns a registered controller
  ###

  controller: (name) -> @_controllers[name]

  ###
  ###

  _removeSection: (section) ->
    return if not @_sections[section.name]
    delete @_sections[section.name]
    delete @_controllers[section.name]
    @_removeChildSections section


  ###
  ###

  _removeChildSections: (section) ->
    start = section.start
    while start
      @_traverse start, (child) =>
        if (sectionName = @_controllerNameFromBlock(child))
          delete @_sections[sectionName]
          delete @_controllers[sectionName]
      start = start.nextSibling


  ###
  ###

  _traverse: (element, callback) ->
    callback element
    for child in element.childNodes
      @_traverse child, callback



  ###
  ###

  _blockifyElements: (elements) ->

    start  = document.createComment "spc:" + (bid = @_generateRandomBlockId())
    end    = document.createComment "epc:" + bid

    first  = elements[0]

    if first
      last   = elements[elements.length-1]
      parent = first.parentNode


      parent.insertBefore start, first

      if parent.lastChild is last
        parent.appendChild end
      else
        parent.insertBefore end, last.nextSibling

    else
      parent = document.createElement("div")
      parent.appendChild start
      parent.appendChild end

    return @_sections[bid] = new Section bid, start, @


  ###
  ###

  _register: (bid, block) -> 
    @_sections[bid] = block
    @update()
    block


  ###
   scans element for comments
  ###

  update: (element = document.body) ->

    if (controllerName = @_controllerNameFromBlock(element))

        if @_sections[controllerName]
          @_sections[controllerName].reset element
        else
          @_sections[controllerName] = new Section controllerName, element, @

        @_bindController controllerName
        return

    # recursively scan children
    if element.childNodes
      for child in element.childNodes
        @update child

  ###
  ###

  _isStartBlock: (element) -> element and element.nodeName is "#comment" and String(element.nodeValue).substr(0, 4) is "spc:"

  ###
  ###

  _controllerNameFromBlock: (element) -> if @_isStartBlock(element) then element.nodeValue.substr(4) else null

  ###
  ###

  _bindController: (name) ->
    return if not (block = @_sections[name]) or not (controller = @_controllers[name]) or block.controller() is controller
    block.controller controller
    controller.elementBlock block

  ###
  ###

  _generateRandomBlockId: () ->   
     
    while 1
      bid = "block-" + (++@_bid)
      break if not @_sections[bid]

    bid



# only one document, only one pilot.
    
module.exports = new Pilot()
module.exports.create = () -> new Pilot()
module.exports.utils = require "./utils"
