{
  "name": "paperclip",
  "version": "0.2.21",
  "description": "controller logic:",
  "main": "./lib/index.js",
  "browserify": "./lib/browser.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/classdojo/paperclip.js.git"
  },
  "author": "",
  "license": "MIT",
  "gitHead": "1336ca5b7f1f0c344a291ace63ddf211d5a94acd",
  "readmeFilename": "README.md",
  "devDependencies": {
    "jsdom": "*",
    "expect.js": "0.2.x",
    "mocha": "1.9.x",
    "karma": "~0.9.5",
    "structr": "~0.2.3",
    "karma-script-launcher": "0.0.2",
    "karma-chrome-launcher": "0.0.2",
    "karma-firefox-launcher": "0.0.3",
    "karma-html2js-preprocessor": "0.0.2",
    "karma-jasmine": "0.0.3",
    "karma-requirejs": "0.0.2",
    "karma-coffee-preprocessor": "0.0.3",
    "karma-phantomjs-launcher": "0.0.2",
    "karma-mocha": "0.0.4",
    "browserify": "~2.25.1",
    "jquery": "~1.8.3",
    "karma-opera-launcher": "0.0.2",
    "karma-safari-launcher": "0.0.3",
    "karma-eyebrowse-launcher": "0.0.0",
    "express": "~3.3.4"
  },
  "bin": {
    "paperclip": "./bin/paperclip"
  },
  "dependencies": {
    "strscanner": "0.0.x",
    "bindable": "0.3.x",
    "dref": "0.0.x",
    "hoist": "0.0.x",
    "async": "0.2.x",
    "uglify-js": "1.3.x",
    "optimist": "0.4.x",
    "pilot-block": "0.0.x",
    "asyngleton": "0.1.x",
    "walkr": "0.0.x",
    "watch_r": "0.0.x",
    "underscore": "1.4.x",
    "type-component": "0.0.x",
    "nofactor": "0.0.x",
    "loaf": "0.0.x"
  },
  "readme": "# Paperclip.js\n\nPaperclip is a data-bindable templating system inspired by [Mustache](https://github.com/janl/mustache.js/), [Angular](http://angularjs.org/), [Derby](http://derbyjs.com/), and [Knockout](http://knockoutjs.com/). It's supported on all major browsers: IE8+, Firefox, Chrome, Safari, Opera, as well as Node.js.\n\nPaperclip works by listening to [bindable](https://github.com/classdojo/bindable.js) objects, and updating the template if anything changes. Unlike angular.js, paperclip takes a more explicit approach to updating templates. If you want to change a value in a template manually, you can easily do so by calling `bindable.set(property, value)`. [Here's an example](http://jsfiddle.net/JTxdM/37/).\n\n\nPaperclip translates HTML directly to JavaScript. For example, the following `hello.pc` file:\n\n```html\nhello {{message}}!\n```\n\nis translated to:\n\n```javascript\nmodule.exports = function(fragment, block, element, text, parse, modifiers) {\n    return fragment([ text(\"hello \"), block({\n        fn: function() {\n            return this.ref(\"message\").value();\n        },\n        refs: [ \"message\" ]\n    }), text(\"! \") ]);\n};\n```\n\n### Features\n\n- template update automatically if the data changes\n- [block helpers](#block-helpers)\n- [data-bind attributes](#data-bind-attributes) (similar to knockout.js)\n- [declarative data-binding](#blocks), similar to angular.js\n- node.js support\n- [block modifiers](#modifiers), similar to angular filters\n- [pollyfills](#pollyfills), similar to angular directives\n\n### Examples\n\n- [hello input](http://jsfiddle.net/JTxdM/38/)\n- [hello world](http://jsfiddle.net/JTxdM/30/)\n- [modifiers](http://jsfiddle.net/JTxdM/31/)\n- [data-binding to input fields](http://jsfiddle.net/JTxdM/32/)\n- [data-binding attributes](http://jsfiddle.net/JTxdM/29/)\n- [inline javascript](http://jsfiddle.net/JTxdM/28/)\n- [animal age calculator](http://jsfiddle.net/JTxdM/27/)\n- [titlecase / lowercase modifiers](http://jsfiddle.net/JTxdM/34/)\n- [if / elseif / else block](http://jsfiddle.net/JTxdM/25/)\n- [html block helper](http://jsfiddle.net/JTxdM/26/)\n- [onEnter event](http://jsfiddle.net/JTxdM/35/)\n- [data-binding styles](http://jsfiddle.net/JTxdM/22/)\n- [manually updating templates](http://jsfiddle.net/JTxdM/37/)\n\n### Third-party components:\n\n- [paperclip-component](https://github.com/classdojo/paperclip-component) - used with [Mojo.js](https://github.com/classdojo/mojo.js). Allows for views to be instantiated within paperclip templates. This is similar to Ember.js's component, and Angular.js's directive implementation. \n- [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill) - placeholder pollyfull for IE users.\n\n### Installation\n\n```bash\nnpm install paperclip -g\n```\n\n### Compiling a script\n\n```bash\npaperclip -i template.pc -o template.pc.js\n```\n\n## Syntax\n\nPaperclip takes on a mustache / handlebars approach with variables, blocks, and pollyfills. Paperclip also allows basic inline javascript, similar to angular.js.\n\n### Blocks\n\nPaperclip support variable blocks, just like Angular.js. [For example](http://jsfiddle.net/JTxdM/24/):\n\n```html\nhello {{ name.first }} {{ name.last }}!\n```\n\nYou can also specify blocks within attributes. [For example](http://jsfiddle.net/JTxdM/29/):\n\n```html\nmy favorite color is <span style=\"color: {{color}}\">{{color}}</span>\n```\n\n\nIf you want to add some sugar, go ahead and [drop-in some javascript](http://jsfiddle.net/JTxdM/28/):\n\n```html\nhello {{ message || \"world!\" }}!\n```\n\n### Modifiers\n\nModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale. For example:\n\ntranslation modifier:\n\n```javascript\npaperclip.modifier(\"t\", function(value) {\n  return i18n.t(value);\n})\n```\n\ntemplate usage:\n\n```html\n{{ \"hello.world\" | t() }}\n```\n\nModifiers can be chained together. For example, you can send a strong message to your users by writing something like:\n\n```html\n{{ \"hello.world\" | t() | uppercase() }}!!!\n```\n\nWhich might produce:\n\n```bash\nHELLO WORLD!!!\n```\n\nModifiers also accept parameters. [For example](http://jsfiddle.net/JTxdM/27/):\n\n```javascript\npaperclip.modifier(\"divide\", function(value, num) {\n  return Math.round((value || 0) / num);\n});\n```\n\ntemplate usage:\n\n```html\nA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\n```\n\n\n### Block Helpers\n\n#### {{ html: content }}\n\nSimilar to escaping content in mustache (`{{{content}}}`). [For example](http://jsfiddle.net/JTxdM/26/):\n\n```html\n{{ html: content }}\n```\n\n\n\n#### {{#if: condition }}\n\nConditional block helper. [For example](http://jsfiddle.net/JTxdM/25/):\n\n```\n{{#if: age > 18 }}\n  You're legally able to vote in the U.S.\n{{/}}\n```\n\n\n#### Custom Block Helpers\n\nPaperclip also allows you to register your own block helpers. This is similar to custom angular.js directives. [For example]():\n\nTODO\n\n### data-bind attributes\n\ndata-bind attributes are borrowed from [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element. \n\n#### {{ event: expression }}\n\nExecuted when an event is fired on the DOM element. Here are all the available events:\n\n- `onChange` - called when an element changes\n- `onClick` - called when an element is clicked\n- `onLoad` - called when an element loads - useful for `<img />`\n- `onSubmit` - called on submit - useful for `<form />`\n- `onMouseDown` - called on mouse down\n- `onMouseUp` - called on mouse up\n- `onMouseOver` - called on mouse over\n- `onMouseOut` - called on mouse out\n- `onKeyDown` - called on key down\n- `onKeyUp` - called on key up\n- `onEnter` - called on enter key up\n- `onDepete` - called on delete key up\n\n[Basic example](http://jsfiddle.net/JTxdM/35/):\n\n```html\n<input type=\"text\" data-bind=\"{{ model: name, onEnter: sayHello() }}\"></input>\n```\n\n\n#### {{ show: bool }}\n\nToggles the display mode of a given element. This is similar to the `{{#if: expression }}` conditional helper.\n\n\n#### {{ css: styles }}\n\nSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/21/):\n\n```html\n<strong data-bind=\"{{ \n  css: {\n      cool    : temp > 0,\n      warm    : temp > 60,\n      hot     : temp > 90\n  } \n}}\"> It's pretty warm! </strong>\n```\n\n#### {{ style: styles }}\n\nSets the style of a given element. [For example](http://jsfiddle.net/JTxdM/22/): \n\n```\n<span data-bind=\"{{ \n  style: {\n    color       : color,\n    'font-size' : size\n  } \n}}\"> Hello World </span>\n```\n\n#### {{ disable: bool }}\n\nToggles the enabled state of an element.\n\n\n#### {{ model: context }}\n\nInput data-binding. [For example](http://jsfiddle.net/JTxdM/23/):\n\n```html\n<input type=\"text\" name=\"message\" data-bind=\"{{ model: this }}\"></input> {{ message }}\n```\n\n#### Custom data-bind helpers\n\nTODO\n\n### Pollyfills\n\nPollyfills are similar to angular directives, but they should only be used to provide support for features not implemented in older browsers. A good example of this is [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill). If you need to create a custom component, [create as a block helper](#custom-block-helpers).\n\n## API\n\n#### template paperclip.template(sourceOrScriptName)\n\ntranslates the source, or script into a paperclip template. [For example](http://jsfiddle.net/JTxdM/36/).\n\n#### elements template.bind(context)\n\nCreates the DOM elements, and binds the elements to the given context. \n\n#### elements.toFragment()\n\nCasts the elements as a document fragment.\n\n#### elements.unbind()\n\nUnbinds the elements from the given context.\n\n## Node.js Usage\n\n\n\n",
  "_id": "paperclip@0.2.21",
  "_from": "paperclip@"
}
