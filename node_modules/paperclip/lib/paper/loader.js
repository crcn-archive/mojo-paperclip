// Generated by CoffeeScript 1.6.2
var BindingCollection, BlockWriter, ElementWriter, FragmentWriter, Loader, ParseWriter, TextWriter, bindable, loaf, modifiers;

modifiers = require("./modifiers");

FragmentWriter = require("./writers/fragment");

BlockWriter = require("./writers/block");

TextWriter = require("./writers/text");

ElementWriter = require("./writers/element");

ParseWriter = require("./writers/parse");

BindingCollection = require("./bindings/collection");

bindable = require("bindable");

loaf = require("loaf");

Loader = (function() {
  /*
  */
  Loader.prototype.__isLoader = true;

  /*
  */


  function Loader(template) {
    this.template = template;
    this.nodeFactory = template.nodeFactory;
    this.paper = template.paper;
    this.bindings = new BindingCollection();
    this._writers = {
      fragment: new FragmentWriter(this),
      block: new BlockWriter(this),
      text: new TextWriter(this),
      element: new ElementWriter(this),
      parse: new ParseWriter(this)
    };
  }

  /*
  */


  Loader.prototype.load = function(context) {
    var node;

    if (context == null) {
      context = {};
    }
    if (!context.__isBindable) {
      context = new bindable.Object(context);
    }
    this.context = context;
    node = this.paper(this._writers.fragment.write, this._writers.block.write, this._writers.element.write, this._writers.text.write, this._writers.parse.write, modifiers);
    this.section = loaf();
    this.section.append(node);
    return this;
  };

  /*
  */


  Loader.prototype.bind = function() {
    this.bindings.bind(this.context);
    return this;
  };

  /*
  */


  Loader.prototype.dispose = function() {
    this.unbind();
    this.section.dispose();
    return this;
  };

  /*
  */


  Loader.prototype.unbind = function() {
    this.bindings.unbind();
    return this;
  };

  /*
  */


  Loader.prototype.toFragment = function() {
    return this.section.toFragment();
  };

  /*
  */


  Loader.prototype.toString = function() {
    var div, frag;

    if (this.nodeFactory.name === "string") {
      return this.section.toString();
    }
    frag = this.section.toFragment();
    div = document.createElement("div");
    div.appendChild(frag.cloneNode(true));
    return div.innerHTML;
  };

  return Loader;

})();

module.exports = Loader;
