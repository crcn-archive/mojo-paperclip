// Generated by CoffeeScript 1.6.2
var AttrTextBinding, ClippedBuffer, type,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

type = require("type-component");

ClippedBuffer = require("../../../../../clip/buffer");

AttrTextBinding = (function(_super) {
  __extends(AttrTextBinding, _super);

  /*
  */


  AttrTextBinding.prototype.type = "attr";

  /*
  */


  function AttrTextBinding(options) {
    this._onChange = __bind(this._onChange, this);    AttrTextBinding.__super__.constructor.call(this, options);
    this.clippedBuffer = new ClippedBuffer(this.value);
  }

  /*
  */


  AttrTextBinding.prototype.bind = function(context) {
    this.context = context;
    return this._binding = this.clippedBuffer.reset(this.context).bind("text").to(this._onChange).now();
  };

  /*
  */


  AttrTextBinding.prototype.unbind = function() {
    var _ref;

    if ((_ref = this._binding) != null) {
      _ref.dispose();
    }
    return this._binding;
  };

  /*
  */


  AttrTextBinding.prototype._onChange = function(text) {
    if (!text.length) {
      this.node.removeAttribute(this.name);
      return;
    }
    this.node.setAttribute(this.name, text);
    return this.nodeModel.set(this.name, text);
  };

  /*
  */


  AttrTextBinding.prototype.test = function(binding) {
    var v, _i, _len, _ref;

    if (type(binding.value) !== "array") {
      return false;
    }
    _ref = binding.value;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      if (v.fn) {
        return true;
      }
    }
    return false;
  };

  return AttrTextBinding;

})(require("../../base"));

module.exports = AttrTextBinding;
