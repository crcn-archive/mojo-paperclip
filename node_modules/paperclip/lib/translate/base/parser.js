// Generated by CoffeeScript 1.6.2
var Parser;

Parser = (function() {
  /*
  */
  function Parser(_t) {
    this._t = _t;
  }

  /*
  */


  Parser.prototype.parse = function(source) {
    this._source = source;
    this._t.source(source);
    return this._parse();
  };

  /*
  */


  Parser.prototype._parse = function() {};

  /*
  */


  Parser.prototype._expectNextCode = function(code) {
    if (this._nextCode() !== code) {
      return this._error();
    }
  };

  /*
  */


  Parser.prototype._expectCurrentCode = function(code) {
    if (this._currentCode() !== code) {
      return this._error();
    }
  };

  /*
  */


  Parser.prototype._nextCode = function() {
    var _ref;

    return (_ref = this._t.next()) != null ? _ref[0] : void 0;
  };

  /*
  */


  Parser.prototype._nextCodeSkipWs = function() {
    while (/[\r\n\s\t]+/.test(this._nextString())) {
      true;
    }
    return this._currentCode();
  };

  /*
  */


  Parser.prototype.skipWhitespace = function() {
    var _ref;

    return (_ref = this._t).skipWhitespace.apply(_ref, arguments);
  };

  /*
  */


  Parser.prototype._nextString = function() {
    var _ref;

    return (_ref = this._t.next()) != null ? _ref[1] : void 0;
  };

  /*
  */


  Parser.prototype._currentCode = function() {
    var _ref;

    return (_ref = this._t.current) != null ? _ref[0] : void 0;
  };

  /*
  */


  Parser.prototype._currentString = function() {
    var _ref;

    return (_ref = this._t.current) != null ? _ref[1] : void 0;
  };

  Parser.prototype._error = function() {
    var buffer;

    if (!this._t.current) {
      throw new Error("\n\nUnexpected End Of File\n\n");
    }
    buffer = "\n\nUnexpected Token: " + this._t.current[1] + "\n\n";
    buffer += this._bufferPosInfo();
    throw new Error(buffer);
  };

  Parser.prototype._bufferPosInfo = function() {
    var buffer, char, epos, n, spos, _i, _ref;

    buffer = this._source + "\n";
    epos = this._t.current[2];
    spos = epos - this._t.current[1].length - 1;
    for (n = _i = 0, _ref = this._source.length; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      if (n > spos && n < epos) {
        char = "^";
      } else {
        char = "-";
      }
      buffer += char;
    }
    buffer += "\n\n";
    return buffer;
  };

  return Parser;

})();

module.exports = Parser;
