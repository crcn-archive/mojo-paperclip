// Generated by CoffeeScript 1.6.2
var Tokenizer, strscan;

strscan = require("strscanner");

/*

1. check if word. If word, then eval until /}|,/
value = parse("name")
*/


Tokenizer = (function() {
  /*
  */
  function Tokenizer() {
    this._s = strscan("", {
      skipWhitespace: true
    });
    this._pool = [];
  }

  /*
  */


  Tokenizer.prototype.peekNext = function() {
    var c, next;

    c = this.current;
    next = this.next();
    this.putBack();
    this.current = c;
    return next;
  };

  /*
  */


  Tokenizer.prototype.source = function(value) {
    if (!arguments.length) {
      return this._source;
    }
    this._s.source(this._source = value);
    return this;
  };

  Tokenizer.prototype.skipWhitespace = function(value) {
    if (!arguments.length) {
      return this._s.skipWhitespace();
    }
    return this._s.skipWhitespace(value);
  };

  /*
  */


  Tokenizer.prototype.putBack = function() {
    if (this.current) {
      return this._pool.push(this.current);
    }
  };

  /*
  */


  Tokenizer.prototype.next = function() {
    if (this._pool.length) {
      return (this.current = this._pool.pop());
    }
    if (this._s.eof()) {
      return (this.current = null);
    }
    return this._next() || this._t(-1, this._s.cchar());
  };

  /*
  */


  Tokenizer.prototype._tstring = function(code) {
    var buffer, c, ccode, cscode, skip;

    ccode = this._s.ccode();
    if (ccode === 39 || ccode === 34) {
      skip = this._s.skipWhitespace();
      this._s.skipWhitespace(false);
      buffer = [];
      while ((c = this._s.nextChar()) && !this._s.eof()) {
        cscode = this._s.ccode();
        if (cscode === 92) {
          buffer.push(this._s.nextChar());
          continue;
        }
        if (cscode === ccode) {
          break;
        }
        buffer.push(c);
      }
      this._s.skipWhitespace(skip);
      return this._t(code, buffer.join(""));
    }
    return false;
  };

  /*
  */


  Tokenizer.prototype._next = function() {};

  /*
  */


  Tokenizer.prototype._t = function(code, value) {
    var p;

    p = this._s.pos();
    this._s.nextChar();
    return this.current = [code, value, p];
  };

  return Tokenizer;

})();

module.exports = Tokenizer;
