// Generated by CoffeeScript 1.6.2
var ActionExpression, base, findRefs, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

base = require("../../base/expression");

_ = require("underscore");

findRefs = function(expr, refs) {
  var child, _i, _len, _ref;

  if (refs == null) {
    refs = [];
  }
  if (!expr) {
    return [];
  }
  if (expr._type === "refPath") {
    refs.push(expr);
  }
  _ref = expr._children;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    child = _ref[_i];
    findRefs(child, refs);
  }
  return refs;
};

ActionExpression = (function(_super) {
  __extends(ActionExpression, _super);

  /*
  */


  ActionExpression.prototype._type = "script";

  /*
  */


  function ActionExpression(name, options) {
    this.name = name;
    this.options = options;
    ActionExpression.__super__.constructor.call(this);
  }

  /*
  */


  ActionExpression.prototype.toString = function() {
    var refBuffer, refs;

    refs = _.uniq(findRefs(this.options).map(function(ref) {
      return "'" + (ref.toPathString()) + "'";
    }));
    refBuffer = ["[", refs.join(","), "]"].join("");
    return "{ fn: function(){ return " + (this.options ? this.options.toString() : 'true') + "; }, refs: " + refBuffer + " }";
  };

  return ActionExpression;

})(base.Expression);

module.exports = ActionExpression;
