// Generated by CoffeeScript 1.6.2
var ModifierExpression, base,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

base = require("../../base/expression");

ModifierExpression = (function(_super) {
  __extends(ModifierExpression, _super);

  /*
  */


  ModifierExpression.prototype._type = "modifier";

  /*
  */


  function ModifierExpression(name, params, expression) {
    this.name = name;
    this.params = params;
    this.expression = expression;
    ModifierExpression.__super__.constructor.call(this);
    this.addChild(this.params, this.expression);
  }

  /*
  */


  ModifierExpression.prototype.toString = function() {
    var buffer, p, params, _i, _len, _ref;

    buffer = [];
    buffer.push("modifiers");
    buffer.push("." + this.name + "(");
    params = [this.expression.toString()];
    _ref = this.params.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      params.push(p.toString());
    }
    buffer.push(params.join(","), ")");
    return buffer.join("");
  };

  return ModifierExpression;

})(base.Expression);

module.exports = ModifierExpression;
