// Generated by CoffeeScript 1.6.2
var BaseTokenizer, Codes, Tokenizer, key, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTokenizer = require("../base/tokenizer");

Codes = (function() {
  function Codes() {}

  Codes.OTHER = -1;

  Codes.WORD = 256;

  Codes.STRING = Codes.WORD + 1;

  Codes.VAR = Codes.STRING + 1;

  Codes.WS = Codes.VAR + 1;

  Codes.NUMBER = Codes.WS + 1;

  Codes.BOOL = Codes.NUMBER + 1;

  Codes.UNDEF = Codes.BOOL + 1;

  Codes.AS = Codes.UNDEF + 1;

  Codes.OR = Codes.AS + 1;

  Codes.ASSIGN = Codes.OR + 1;

  Codes.EQ = Codes.ASSIGN + 1;

  Codes.NEQ = Codes.EQ + 1;

  Codes.NOT = Codes.NEQ + 1;

  Codes.DOLLAR = 36;

  Codes.LP = 40;

  Codes.RP = 41;

  Codes.COMA = 44;

  Codes.DOT = 46;

  Codes.BS = 47;

  Codes.COLON = 58;

  Codes.SEMI_COLON = 59;

  Codes.AT = 64;

  Codes.LB = 123;

  Codes.PIPE = 124;

  Codes.RB = 125;

  Codes.byCodes = {};

  Codes.key = function(code) {
    var key;

    for (key in Codes) {
      if (Codes[key] === code) {
        return key;
      }
    }
  };

  return Codes;

})();

for (key in Codes) {
  Codes.byCodes[Codes[key]] = Codes[key];
}

/*

1. check if word. If word, then eval until /}|,/
value = parse("name")
*/


Tokenizer = (function(_super) {
  __extends(Tokenizer, _super);

  function Tokenizer() {
    _ref = Tokenizer.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  Tokenizer.prototype.codes = Codes;

  Tokenizer.codes = Codes;

  /*
  */


  Tokenizer.prototype._next = function() {
    var ccode, t, word;

    if (this._s.isAZ() || (ccode = this._s.ccode()) === 36 || ccode === 95 || ccode === 64) {
      word = this._s.next(/[_$@a-zA-Z0-9]+/);
      if (/true|false/.test(word)) {
        return this._t(Codes.BOOL, word);
      }
      if (/undefined|null/.test(word)) {
        return this._t(Codes.UNDEF, word);
      }
      if (word === "as") {
        return this._t(Codes.AS, word);
      }
      return this._t(Codes.VAR, word);
    } else if ((t = this._tstring(Codes.STRING))) {
      return t;
    } else if (this._s.is09()) {
      return this._t(Codes.NUMBER, this._s.nextNumber());
    } else if (ccode === 33) {
      if (this._s.peek(2) === "!=") {
        this._s.skip(1);
        return this._t(Codes.NEQ, "!=");
      } else {
        return this._t(Codes.NOT, "!");
      }
    } else if (ccode === 61) {
      if (this._s.peek(2) === "==") {
        this._s.skip(1);
        return this._t(Codes.EQ, "==");
      } else {
        return this._t(Codes.ASSIGN, "=");
      }
    } else if (ccode === 124 && this._s.peek(2) === "||") {
      this._s.nextChar();
      return this._t(Codes.OR, "||");
    } else if (Codes.byCodes[ccode]) {
      return this._t(Codes.byCodes[ccode], this._s.cchar());
    }
  };

  return Tokenizer;

})(BaseTokenizer);

module.exports = Tokenizer;
