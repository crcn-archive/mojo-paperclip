// Generated by CoffeeScript 1.6.2
var Clip, ClippedBuffer, ClippedBufferPart, bindable,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

Clip = require("./index");

/*
  watches for any changes in the template data
*/


ClippedBufferPart = (function() {
  /*
  */
  function ClippedBufferPart(clippedBuffer, script) {
    this.clippedBuffer = clippedBuffer;
    this.script = script;
    this._onUpdated = __bind(this._onUpdated, this);
    this.clip = new Clip({
      script: this.script
    });
    this.clip.bind("value").to(this._onUpdated);
  }

  /*
  */


  ClippedBufferPart.prototype.dispose = function() {
    return this.clip.dispose();
  };

  /*
  */


  ClippedBufferPart.prototype.update = function() {
    this.clip.reset(this.clippedBuffer._data);
    this.clip.update();
    return this.value = this.clip.get("value");
  };

  /*
  */


  ClippedBufferPart.prototype._onUpdated = function(value) {
    this.value = value;
    if (this.clippedBuffer._updating) {
      return;
    }
    return this.clippedBuffer.update();
  };

  /*
  */


  ClippedBufferPart.prototype.toString = function() {
    var _ref;

    return String((_ref = this.value) != null ? _ref : "");
  };

  return ClippedBufferPart;

})();

/*
 Keeps track of each template block. E.g: hello {{craig}}, how are you?
*/


ClippedBuffer = (function(_super) {
  __extends(ClippedBuffer, _super);

  /*
  */


  function ClippedBuffer(buffer) {
    var binding, bufferPart, _i, _len;

    ClippedBuffer.__super__.constructor.call(this);
    this.buffer = [];
    this.bindings = [];
    this._data = {};
    for (_i = 0, _len = buffer.length; _i < _len; _i++) {
      bufferPart = buffer[_i];
      if (bufferPart.fn) {
        this.buffer.push(binding = new ClippedBufferPart(this, bufferPart));
        this.bindings.push(binding);
      } else {
        this.buffer.push(bufferPart);
      }
    }
  }

  /*
  */


  ClippedBuffer.prototype.reset = function(data) {
    if (data == null) {
      data = {};
    }
    this._data = data;
    this.update();
    return this;
  };

  /*
  */


  ClippedBuffer.prototype.dispose = function() {
    var binding, _i, _len, _ref;

    _ref = this.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      binding = _ref[_i];
      binding.dispose();
    }
    return this.bindings = [];
  };

  /*
   updates the current text by stringifying the buffer
  */


  ClippedBuffer.prototype.update = function() {
    var binding, _i, _len, _ref;

    this._updating = true;
    _ref = this.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      binding = _ref[_i];
      binding.update();
    }
    this.set("text", this.text = this.render());
    return this._updating = false;
  };

  /*
   stringifies the buffer
  */


  ClippedBuffer.prototype.render = function() {
    return this.buffer.join("");
  };

  /*
  */


  ClippedBuffer.prototype.toString = function() {
    return this.text;
  };

  return ClippedBuffer;

})(bindable.Object);

module.exports = ClippedBuffer;
